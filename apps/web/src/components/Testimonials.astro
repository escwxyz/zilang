---
import type { TestimonialsBlock } from "@repo/types";
import { cn, getUrl } from "@/lib/utils";
import { StarIcon } from "@lucide/astro";
// import { Image } from "@unpic/astro";
import { Image } from "astro:assets";

type Props = TestimonialsBlock & {
  className?: string;
};

const { className, testimonials, title, description } = Astro.props;

const hasTestimonials = Array.isArray(testimonials) && testimonials.length > 0;
const TRUNCATE_LENGTH = 300;
---

{
  hasTestimonials && (
    <div class={cn("container space-y-6 mx-auto", className)}>
      <h3 class="text-3xl font-bold text-center">{title}</h3>
      {description && (
        <div class="text-muted-foreground text-center">{description}</div>
      )}
      <div class="my-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-8">
        {testimonials.map((testimonial, idx) => {
          const fullContent = testimonial.content;
          const isLong = fullContent.length > TRUNCATE_LENGTH;
          const truncatedContent =
            fullContent.slice(0, TRUNCATE_LENGTH) + "...";

          const avatar = testimonial.avatar;

          const avatarUrl = typeof avatar === "object" ? avatar?.url : null;

          const avatarAlt = typeof avatar === "object" ? avatar?.alt : "";

          const hasAvatar = Boolean(avatarUrl);
          return (
            <div class="flex flex-col gap-2">
              <div class="flex items-center gap-2 justify-between">
                <div class="flex items-center gap-2">
                  {hasAvatar ? (
                    <Image
                      src={getUrl(avatarUrl!)}
                      alt={avatarAlt ?? ""}
                      width={40}
                      height={40}
                      class="rounded-full"
                    />
                  ) : (
                    <div class="w-10 h-10 rounded-full bg-primary" />
                  )}
                  <div class="flex flex-col">
                    <p class="text-sm font-medium text-primary">
                      {testimonial.name}
                    </p>
                    <p class="text-sm text-muted-foreground">
                      {testimonial.country}
                    </p>
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  {Array.from({ length: 5 }).map((_, index) => (
                    <StarIcon
                      size={20}
                      class={`${index < Number(testimonial.star) ? "text-yellow-500" : "text-muted-foreground"}`}
                      fill="currentColor"
                    />
                  ))}
                </div>
              </div>

              <div class="text-sm text-muted-foreground mt-4">
                <span
                  class="testimonial-content"
                  data-idx={idx}
                  data-truncated={isLong ? "true" : "false"}
                >
                  {isLong ? truncatedContent : fullContent}
                </span>
                {isLong && (
                  <button
                    class="ml-2 text-primary underline cursor-pointer testimonial-toggle"
                    type="button"
                    data-idx={idx}
                    data-full-content={fullContent}
                    data-truncated-content={truncatedContent}
                  >
                    Read more
                  </button>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  )
}

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const toggles: NodeListOf<HTMLButtonElement> = document.querySelectorAll(
      ".testimonial-toggle",
    );
    toggles.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const idx = btn.getAttribute("data-idx");
        const contentSpan: HTMLSpanElement | null = document.querySelector(
          `.testimonial-content[data-idx="${idx}"]`,
        );

        if (!contentSpan) return;

        const isTruncated =
          contentSpan.getAttribute("data-truncated") === "true";

        const fullContent =
          btn?.dataset?.fullContent || btn?.getAttribute("data-full-content");
        const truncatedContent =
          btn.dataset.truncatedContent ||
          btn.getAttribute("data-truncated-content");

        if (isTruncated) {
          contentSpan.textContent = fullContent;
          contentSpan.setAttribute("data-truncated", "false");
          btn.textContent = "Show less";
        } else {
          contentSpan.textContent = truncatedContent;
          contentSpan.setAttribute("data-truncated", "true");
          btn.textContent = "Read more";
        }
      });
    });
  });

  // TODO: gsap animation for the testimonials
</script>
